import math
import numpy as np
import matplotlib.pyplot as plt
import scipy
import scipy.special


#Constants
a=1.75
b=2.5
dx = 0.0175
dy = 0.025

w=1


#####################################+
#Arrays
#X Array
x0 = 0.0
xend = a

xsteps = int((xend-x0)/dx)+1
X= [0] * xsteps
X[0] = x0
for n in range(0,xsteps-1):
    X[n+1] = X[n] + dx

#Y Array
y0 = 0.0
yend = b
ysteps = int((yend-y0)/dy)+1

Y= [0] * ysteps
Y[0] = y0
for n in range(0,ysteps-1):
    Y[n+1] = Y[n] + dy

#####Matirices####
U =np.zeroes([xsteps,ysteps])  #U(i,j) = U(x,y)
UT =np.zeroes([xsteps,ysteps])  #U Tilda

for i in range(0,xsteps):
    for j in range (ysteps):
        U(i,0)=0
        #U(i,

#####################################
#Numerical Solution
BD2 = np.zeros([rsteps,tsteps])  #U[i,n] : U[r,t]#
m = alpha*dt/dr**2
#RHS
RHS = np.zeros([rsteps,1])
RHS[0] = 0.0   ###BC(Derivative at r = 0)
RHS[rsteps-1] = b*dr     ###BC(Derivative at r=rend)

A=np.identity(rsteps)

#Initial Conditions
for i in range (0,rsteps):
    BD2[i,0]= 0.0                 ##Initial Condition U(0,r)=0##

for i in range(1,rsteps-1):
    BD2[i,1] = m*BD2[i-1,0]+(1.0-2.0*m)*BD2[i,0]+m*BD2[i+1,0]

BD2[0,1] = BD2[1,1]
BD2[rsteps-1,1] = BD2[rsteps-2,1] + b*dr
###########################
#Matrix A
A[0,0]=-1.5
A[0,1]=2
A[0,2]=-0.5
A[rsteps-1,rsteps-3]=0.5
A[rsteps-1,rsteps-2]=-2
A[rsteps-1,rsteps-1]=1.5

for i in range(1,rsteps-1):
    #SUB
    if (i>0):
        A[i,i-1] = alpha*dt/(2*R[i]*dr)-m
    #Main
    A[i,i] = 2*m+1.5
    
    #Super
    if(i>0):
        A[i,i+1]=-alpha*dt/(2*R[i]*dt)-m

###############################################
####Solving Numerically####



#This fills my RHS#
for n in range(1,tsteps-1):
    #ModifiedCode
    #if (T[n]<=troast):
    for i in range(1,rsteps-1):
            RHS[i] = 2.0*BD2[i,n]-0.5*BD2[i,n-1]
    #else:
    #    RHS[rsteps-1]=0
    #    A[rsteps-1,rsteps-3] = 0
    #    A[rsteps-1,rsteps-2] = 0
    #    A[rsteps-1,rsteps-1] = 1.0       
    BD2[:,range(n+1,n+2)]=np.linalg.solve(A,RHS)#Solves My Stuff
        
        
       
#############################################################################
#############################################################################
#############################################################################
#Analytical Soultion
U_EX = np.zeros([rsteps,1])

k = 100   #For finding zeros of J1
psi = scipy.special.jn_zeros(1,k) #psi holds the zeros of J1
t=tend



for i in range(0,rsteps):
    U_EX[i] =b/(2.0*a)*((R[i])**2) + 2.0*alpha*b*t/a -b*a/4.0

    for m in range (1,k):
        U_EX[i] +=  2.0*b*alpha*(scipy.special.jv(2,psi[m]))/(psi[m]**2*((scipy.special.jv(0,psi[m]))**2))*math.exp(-alpha*psi[m]**2*t/(a**2))*scipy.special.jv(0,psi[m]*R[i]/a)

        
###############################################################################
###############################################################################
############################################################################### 
#Plots
#plt.plot(R,BD2[:,tsteps-2], linewidth = 3, color = 'blue')
#plt.plot(R,BD2[:,1000], linewidth = 3, color = 'green')

#plt.plot(R,abs(BD2[:,tsteps-1]-U_EX[:,0]), linewidth = 3, color='red')
#plt.plot(R, U_EX, linewidth = 3 , color = 'orange')

#plt.show()

#plt.plot(R,U_EX[:,0], linewidth = 3, color='blue')
plt.plot(R,BD2[:,tsteps-1], linewidth = 3, color='green')
#plt.legend((r'$U_{EX}$', r'$U_{BD2}$'),loc="top left")
#plt.xlabel(r'$r$', fontsize=20)
#plt.ylabel('Error', rotation = 90, labelpad = 20, fontsize=20)
#plt.title("U-BD2 - U_EX(Validation)", fontsize=20)
plt.show()

#plt.plot(R,BD2[:,tsteps-1], linewidth = 3, color='green')
#plt.xlabel(r'$r$', fontsize=20)
#plt.ylabel(r'$U$', rotation = 1, labelpad = 20, fontsize=20)
#plt.title("Heat Plot(Cooling Included)", fontsize=20)
#plt.show()
